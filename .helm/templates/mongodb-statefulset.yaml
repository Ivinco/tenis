---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Chart.Name }}-mongodb
spec:
  serviceName: "mongodb"
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Chart.Name }}-mongodb
  template:
    metadata:
      labels:
        app: {{.Chart.Name }}-mongodb
    spec:
      imagePullSecrets:
      - name: registry-secret
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: mongo-init
        image: {{ .Values.werf.image.mongodb }}
        command:
        - bash
        - "-c"
        - |
          mongod --fork --logpath /var/log/mongod.log --bind_ip_all
          set -e
          until mongosh --eval "print(\"Connection established, mongodb should be up\")"; do
            echo waiting for mongo
            sleep 2
          done
          mongosh $INIT_DB --eval 'if (db.getCollectionNames().includes("users") === false) {db.createCollection("users", { capped: true, size: 5242880, max: 5000 });}'
          mongosh $INIT_DB --eval 'if (db.users.findOne({ name: "$INIT_USER_NAME" }) === null) {db.users.insertOne({ name: "$INIT_USER_NAME", email: "$INIT_USER_EMAIL", password: "$INIT_PASSWORD", active: true, commentReplaceRules: {"$PROJECT_KEY_1": "$PROJECT_VALUE_1", "$PROJECT_KEY_2": "$PROJECT_VALUE_2", "$PROJECT_KEY_3": "$PROJECT_VALUE_3"} });}'
          mongod --shutdown
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        env:
        - name: INIT_DB
          value: {{ pluck .Values.werf.env .Values.mongodb.env.INIT_DB | first | default .Values.mongodb.env.INIT_DB._default }}
        - name: INIT_USER_NAME
          value: {{ pluck .Values.werf.env .Values.mongodb.env.INIT_USER_NAME | first | default .Values.mongodb.env.INIT_USER_NAME._default }}
        - name: INIT_USER_EMAIL
          value: {{ pluck .Values.werf.env .Values.mongodb.env.INIT_USER_EMAIL | first | default .Values.mongodb.env.INIT_USER_EMAIL._default }}
        - name: INIT_PASSWORD
          value: {{ pluck .Values.werf.env .Values.mongodb.env.INIT_PASSWORD | first | default .Values.mongodb.env.INIT_PASSWORD._default }}
        - name: PROJECT_KEY_1
          value: {{ pluck .Values.werf.env .Values.mongodb.env.PROJECT_KEY_1 | first | default .Values.mongodb.env.PROJECT_KEY_1._default }}
        - name: PROJECT_VALUE_1
          value: {{ pluck .Values.werf.env .Values.mongodb.env.PROJECT_KEY_1 | first | default .Values.mongodb.env.PROJECT_VALUE_1._default }}
        - name: PROJECT_KEY_2
          value: {{ pluck .Values.werf.env .Values.mongodb.env.PROJECT_KEY_2 | first | default .Values.mongodb.env.PROJECT_KEY_2._default }}
        - name: PROJECT_VALUE_2
          value: {{ pluck .Values.werf.env .Values.mongodb.env.PROJECT_VALUE_2 | first | default .Values.mongodb.env.PROJECT_VALUE_2._default }}
        - name: PROJECT_KEY_3
          value: {{ pluck .Values.werf.env .Values.mongodb.env.PROJECT_KEY_3 | first | default .Values.mongodb.env.PROJECT_KEY_3._default }}
        - name: PROJECT_VALUE_3
          value: {{ pluck .Values.werf.env .Values.mongodb.env.PROJECT_VALUE_3 | first | default .Values.mongodb.env.PROJECT_VALUE_3._default }}
      containers:
      - name: mongo
        image: {{ .Values.werf.image.mongodb }}
        command:
        - mongod
        - "--bind_ip_all"
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongo-persistent-storage
          mountPath: /data/db
        resources:
          {{- toYaml .Values.mongodb.resources | nindent 10 }}
  volumeClaimTemplates:
  - metadata:
      name: mongo-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "longhorn"
      resources:
        requests:
          storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: {{.Chart.Name }}-mongodb
  labels:
    app: {{.Chart.Name }}-mongodb
spec:
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
  selector:
    app: {{.Chart.Name }}-mongodb
