#TODO Global - check for sensitive info
apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: tenis-static
  name: tenis-static
spec:
  finalizers:
  - kubernetes
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: tenis-cert-issuer
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: tenis-static@ivinco.com
    privateKeySecretRef:
      name: tenis-private-key-secret
    solvers:
    - http01:
        ingress:
          class: nginx

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tenis-nginx-config
  labels:
    component: frontend
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /dev/stderr;
    pid /run/nginx.pid;
    daemon off;
    # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
    include /usr/share/nginx/modules/*.conf;
    events {
        worker_connections 1024;
    }
    http {
        log_format json_combined escape=json '{'
          '"time_local":"$time_local",'
          '"remote_addr":"$remote_addr",'
          '"remote_user":"$remote_user",'
          '"request":"$request",'
          '"status": "$status",'
          '"body_bytes_sent":"$body_bytes_sent",'
          '"request_time":"$request_time",'
          '"http_referrer":"$http_referer",'
          '"http_user_agent":"$http_user_agent",'
          '"http_x_forwarded_for":"$http_x_forwarded_for"'
        '}';

        access_log  /dev/stdout  json_combined;
        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        types_hash_max_size 2048;
        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;
        # Load modular configuration files from the /etc/nginx/conf.d directory.
        # See http://nginx.org/en/docs/ngx_core_module.html#include
        # for more information.
        include /etc/nginx/conf.d/*.conf;
        server {
            listen       3000 default_server;
            listen       [::]:3000 default_server;
            server_name  _;
            root         /usr/share/nginx/html;
            # Load configuration files for the default server block.
            include /etc/nginx/default.d/*.conf;
            location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;
                try_files $uri /index.html;
            }
            error_page 404 /404.html;
            location = /404.html {
            }
            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
            }
        }
    }
---
# Source: tenis/templates/frontend-nginx-env-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tenis-nginx-env-config
  labels:
    app: tenis-frontend
data:
  env-config.js: |-
    window._env_ = {
      API_SERVER: "https://api.$DOMAIN_NAME",
      BACKEND_PORT: "443"
    };
---
# Source: tenis/templates/mongodb-init-script-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: tenis-mongodb-init
  labels:
    app: tenis-mongodb
data:
  init-script.sh: |-
    mongod --fork --logpath /var/log/mongod.log --bind_ip_all
    set -e
    until mongosh --eval "print(\"Connection established, mongodb should be up\")"; do
      echo waiting for mongo
      sleep 2
    done

    mongosh $INIT_DB --eval 'if (db.getCollectionNames().includes("users") === false) {
      db.createCollection("users", { capped: true, size: 5242880, max: 5000 });
    }'

    mongosh $INIT_DB --eval 'if (db.users.findOne({ name: "Admin" }) === null) {
      db.users.insertOne({
        name: "Admin",
        email: "sys@example.com",
        password: "pbkdf2:sha256:260000$GKvgfDCCmvVXVbKi$538697dbe4192a5691bdb63c4e989d702db8da8dd80e87fdbb101a12b4ae56c3",
        active: true,
        commentReplaceRules: {},
        projects: ["Test"]
      });
    }'

    mongosh $INIT_DB --eval 'db.current.createIndex({ project: 1, host: 1, alertName: 1 }, { unique: true })'
    mongod --shutdown
---
# Source: tenis/templates/backend-deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: tenis-backend
  labels:
    app: tenis-backend
    component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 8000
      targetPort: 8000
      protocol: TCP
      name: http
  selector:
    app: tenis-backend
---
# Source: tenis/templates/frontend-deployment.yaml
apiVersion: v1
kind: Service
metadata:
  name: tenis-frontend
  labels:
    app: tenis-frontend
    component: frontend
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app: tenis-frontend
---
# Source: tenis/templates/mongodb-statefulset.yaml
apiVersion: v1
kind: Service
metadata:
  name: tenis-mongodb
  labels:
    app: tenis-mongodb
spec:
  ports:
    - port: 27017
      targetPort: 27017
      name: mongodb
  selector:
    app: tenis-mongodb
---
# Source: tenis/templates/backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenis-backend
  labels:
    app: tenis-backend
    component: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tenis-backend
  template:
    metadata:
      labels:
        app: tenis-backend
    spec:
      initContainers:
        - name: check-mongodb
          image: busybox:1.31 # TODO own image?
          env:
            - name: MONGO_HOST
              value: tenis-mongodb
          command:
            - ash
            - "-c"
            - |
              until nc -z $MONGO_HOST 27017
              do
                  echo "MongoDB is not ready"
                  sleep 1
              done
      containers:
        - name: tenis-backend
          image: docker-registry.ivinco.com/static/tenis-backend:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: MONGO_HOST
              value: tenis-mongodb
            - name: MONGO_DATABASE
              value: tenis
            - name: API_TOKEN
              value: wRmqxW7jxfFowHEx
          livenessProbe:
            httpGet:
              path: /healz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          startupProbe:
            httpGet:
              path: /healz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 10
            timeoutSeconds: 5
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 50m #TODO2 review requirements
              memory: 128Mi
---
# Source: tenis/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenis-frontend
  labels:
    app: tenis-frontend
    component: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tenis-frontend
  template:
    metadata:
      labels:
        app: tenis-frontend
    spec:
      imagePullSecrets:
        - name: registry-secret #TODO add static secret? not private repo? semi-private-repo?
      containers:
        - name: tenis-frontend
          image: docker-registry.ivinco.com/static/tenis-frontend:1.0.0
          imagePullPolicy: IfNotPresent
          command:
            - nginx
            - -e
            - /dev/stderr
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 10
            timeoutSeconds: 5
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
              readOnly: true
            - name: nginx-env-config
              mountPath: /usr/share/nginx/html/env-config.js
              subPath: env-config.js
          resources:
            limits:
              memory: 128Mi
            requests:
              cpu: 50m #TODO review requirements
              memory: 128Mi
      volumes:
        - name: nginx-config-volume
          configMap:
            name: tenis-nginx-config
        - name: nginx-env-config
          configMap:
            name: tenis-nginx-env-config
---
# Source: tenis/templates/mongodb-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tenis-mongodb
spec:
  serviceName: "mongodb"
  replicas: 1
  selector:
    matchLabels:
      app: tenis-mongodb
  template:
    metadata:
      labels:
        app: tenis-mongodb
    spec:
      imagePullSecrets:
        - name: registry-secret #TODO add static secret? not private repo? semi-private-repo?
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: mongo-init
          image: mongo:7.0-rc
          command: ["/bin/sh", "/tmp/init-script.sh"]
          volumeMounts:
            - name: tenis-mongodb-init
              mountPath: /tmp/init-script.sh
              subPath: init-script.sh
            - name: mongo-persistent-storage
              mountPath: /data/db
          env:
            - name: INIT_DB
              value: tenis
      containers:
        - name: mongo
          image: mongo:7.0-rc
          command:
            - mongod
            - "--bind_ip_all"
          ports:
            - containerPort: 27017 #TODO ckeck name works fine
              name: mongodb
          volumeMounts:
            - name: mongo-persistent-storage
              mountPath: /data/db
          resources:
            limits:
              memory: 512Mi
            requests:
              cpu: 200m #TODO review requirements
              memory: 512Mi
      volumes:
        - name: tenis-mongodb-init
          configMap:
            name: tenis-mongodb-init
            defaultMode: 0777 #TODO2 review permissions
  volumeClaimTemplates:
    - metadata:
        name: mongo-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "longhorn" #TODO2 default storage class
        resources:
          requests:
            storage: 10Gi #TODO2 review storage requirements
---
# Source: tenis/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/issuer: tenis-cert-issuer
    kubernetes.io/ingress.class: "nginx" #TODO own ingress? default?
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:3000, https://*.$DOMAIN_NAME" #TODO cors
  name: tenis-frontend-ingress
  labels:
    component: frontend
spec:
  ingressClassName: nginx
  rules:
    - host: $DOMAIN_NAME #TODO domain
      http:
        paths:
          - backend:
              service:
                name: tenis-frontend
                port:
                  number: 80
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - $DOMAIN_NAME #TODO domain
      secretName: tenis-secret
---
# Source: tenis/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/issuer: tenis-cert-issuer
    kubernetes.io/ingress.class: "nginx"  #TODO own ingress? default?
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "http://localhost:3000, https://*.$DOMAIN_NAME"  #TODO cors
  name: tenis-api-ingress
  labels:
    component: frontend
spec:
  ingressClassName: nginx  #TODO ingress class
  rules:
    - host: api.$DOMAIN_NAME #TODO domain
      http:
        paths:
          - backend:
              service:
                name: tenis-backend
                port:
                  number: 8000
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - api.$DOMAIN_NAME #TODO domain
      secretName: tenis-api-secret
